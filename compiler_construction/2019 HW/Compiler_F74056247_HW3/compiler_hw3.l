/* Definition section */
%{
#define BUF_SIZE 256
#include<string.h>
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
extern int printDump;
extern int scopeNumber;
char buf[BUF_SIZE];
char returnstring[100];
//concat input text from file
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
void printLine();
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return ADD; }
"-" 	{ CONCAT; return SUB; }
"*" 	{ CONCAT; return MUL; }
"/" 	{ CONCAT; return DIV; }
"%"     { CONCAT; return MOD; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return MT; }
"<"		{ CONCAT; return LT; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return ASGN; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; return DIVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; return AND; }
"||"	{ CONCAT; return OR; }
"!"		{ CONCAT; return NOT; }

 /* Delimiters */
"("		{ CONCAT; return LB; }
")"		{ CONCAT; return RB; }
"{"		{ CONCAT; return LCB; }
"}"		{ CONCAT; return RCB; }
"["		{ CONCAT; return LSB; }
"]"		{ CONCAT; return RSB; }
","		{ CONCAT; return COMMA; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; return VOID; }
"int"		{ CONCAT; return INT; }
"float"  	{ CONCAT; return FLOAT; }
"string"  	{ CONCAT; return STRING; }
"bool"  	{ CONCAT; return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RETURN; }

 /* String Constant */
\"				        { CONCAT;
                            BEGIN STRING_STATE;
                             strncat(returnstring, "\"", 1);
                        }
<STRING_STATE>\"		{ 
                            CONCAT;
                            BEGIN INITIAL;
                            strncat(returnstring, "\"", 1);
                            yylval.string = (char*)malloc(sizeof(char)*strlen(returnstring)+1);
                            strcpy(yylval.string, returnstring); 
                            return STRING_LITERAL; }
<STRING_STATE>[^"]*		{ CONCAT;
                            strncat(returnstring, yytext, BUF_SIZE - strlen(returnstring) - 1);
                        }

 /* Number Constant */
{integer}	{ CONCAT; return I_CONST; }
{float}	    { CONCAT; return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT; BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT; }
 /* end of comment line, print a total line */
<COMMENT>\n			{ CONCAT; printLine(); }
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{ CONCAT BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT; }

 /* Variable ID */
 {id}       { 
                CONCAT; 
                yylval.string = (char*)malloc(sizeof(char)*strlen(yytext)+1);
                strcpy(yylval.string, yytext); 
                return ID; 
            }

 /* others */

[;]         { CONCAT; return SEMICOLON; }
 /* end of line, print a total line */
[\n]        { CONCAT; printLine(); }
[ \t]		{ CONCAT; } /* Ignore */
[^ \t\n] 	{ CONCAT; } /* Ignore other charactor sets */
<<EOF>>     { return 0;}

%%

int yywrap()
{
    return 1;
}

void printLine(){
    printf("%d:%s", yylineno, buf);
    //empty buffer
    memset(buf, 0, 255);
}